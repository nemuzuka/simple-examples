plugins {
    id 'java'
    id 'com.diffplug.eclipse.apt' version '3.22.0'
    id 'com.diffplug.gradle.spotless' version '3.27.2'
    id "net.researchgate.release" version '2.8.1'
    id 'org.seasar.doma.compile' version '1.0.0'
    id "io.freefair.lombok" version "5.1.0"
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'jacoco'
}

def domaVersion = project.property('release.releaseVersion')

spotless {
    java {
        googleJavaFormat('1.7')
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
    options.encoding = 'UTF-8'
    aptOptions {
        processorArgs = [
                'doma.domain.converters' : 'examples.domain.DomainConverterProvider'
        ]
    }
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-proc:none']
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Doma-Tutorial', 'Implementation-Version': archiveVersion
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {url 'https://oss.sonatype.org/content/repositories/snapshots/'}
}

dependencies {
    annotationProcessor "org.seasar.doma:doma-processor:${domaVersion}"
    implementation "org.seasar.doma:doma-core:${domaVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'

    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.0"

    testCompile "org.assertj:assertj-core:3.11.1"

    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly "org.postgresql:postgresql:42.2.9"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { it.path == '.apt_generated' }
            }
            withXml { provider ->
                def node = provider.asNode()
                // specify output path for .apt_generated
                node.appendNode( 'classpathentry', [ kind: 'src', output: 'bin/main', path: '.apt_generated'])
            }
        }
    }
    jdt {
        javaRuntimeName = 'JavaSE-11'
    }
}
